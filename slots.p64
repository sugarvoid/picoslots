picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE5IDE0OjUxOjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxNjoxODowMCIscmV2aXNpb249MzUyNF1dbHo0AMQEAACRNgAA8yF7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMt5PTAsem9vbT05fSw_APIYJj8f
kB4wHmAOcA5ADpAOMA6QDiAOsA4QDg8UCI8bCA4gbxQPGz8UFABvsA4gvvASYwAd5CM4EDhAGCAY
IBgwCJAIBAD-CUAIcAhgCFAIcAhQCIAIMAigCBAIwBjwF14AHfcEBjmgCTAJgAlQCWAJcAlACZAJ
MAQAVCAJsAkQBABv2fAHOfAGYQAd8wITMwAzUAMgAwADIANAAzADMAYA11ADYBNgEyATcANgA1AY
AP8GQAMgAw8bAyADUCMADgAjoA7gHvAHdQAd5SHa8AMnEBcABwAHQAcAAgAiQCcIAAAWABAgCADP
J0AHIBcQJ-AE2vAxZAAd8BAECxALsAsgC3AbAAsgC4AbAAsAG7AbDxmQGw4gDnAbEAIQHvgBgCAO
sB4QDsAOBACPAA7QLuAe8AFsAB3xHRhDoAMAAwATcCMwA2ADEAOAHxgDDhADcA4AAxAOAANwDjAO
EANgDjAuAw5QDABTAA5QTjCRAm8wDqA_8AVzAB0wE4hgXQKDeAAIsAgQCKAEADGwCAAEABfACABP
wCjwGF4AGY8SEgT2A-AAFgMAGS-2A2IACxk4YgC0CAgE8AMVwAUaBTAEACs1EEEAcy0wLjE4NzVH
ADAyLjYNAAFMAC0xNk0AdAsVQAUQBTAEAA9NACqcED8QMA4QHiAOAgBPEB4gPlkAJu8EBAQAGgAK
EBoQCgAaAC0BCy0xNu4BH-BfARxBZgAGBQIAIw8QCQDPDGYMZgwWJRYAZgBmgAANGTJPAPcICgoE
IDEwET8QERABDj8ODgEAAQ5dDhEEAAASAK89DgEQET4RMDEgXQAMHzXdAB0vMTC1BBYiQBO1BAAG
AB9AtQQCPjMOM7MED3QAEvATKV8bMD4AHgAfEkAeHR4tEA0gHg0QHRANEA1ADRAdIB1gHQ4AI3AN
BgD-AA0AHZAdIA2wDRANwB3wFW8ADQ_-BFgPbQAAH-AyAH6PAwUEMAcAVyD4AgwPNAAuDpoADzEA
-wKPAwUEIFcABzA0ACEPygAeDzEA------_rw0VABPA49S5gBfAsBQUAUED-ECJACABPDvAgDgkA
KBH_RgAv8CwFAJrwEID1G3AFYAWwDvASDrAFYAWgDvAUDqAFYAWQDvAWDpAiAFAO8BgOgAkAOf4a
gDwADwUADyz1LlsHczIuNDk5MjQCAAOqAbAtNC4zNjA2NzgyMQYAArgBHDSqBzAXEAcCAC8AJ5oM
Gn8DBQQnEEcQNQAgXwcAFxA3NwAdUAcAFwA3pwAPOQAdPzcQJ24AIG8QBxA3ADfcACAvEAelABEP
bAMrANYALwBHnwAfHzdCASRPABcAF24AHxEADgEPOAAfH_AxAHyACwUEJwAnADebEhAwvAIRF58S
Ag4AECfmAA-TDxvRBwcEdkAWEAsQFgArAAgAL0B2-gEZAEAAkUoWGgsaFgorCggAH0pAAB6fQBZA
FgAoABZAfAAifkoWCigKFkp4AA9TBg8PMQD-----------------------------------------
-7NQbT04fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE5IDE0OjUyOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxNjoxODowMCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE5IDE0OjUxOjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxNjoxODowMCIscmV2aXNpb249MzMwM11dbHo0AGsAAABbEAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9
MAgA0nk9MCx0aWxlX2g9MTYKABB3CgCwem9vbT0wLjI1fX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE5IDE0OjUyOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxNjoxODowMCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE5IDE0OjUxOjM2Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxNjoxODowMCIscmV2aXNpb249MzMxOF1dbHo0AGcBAAD6CgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA----
--_9H-8BAKzzDcgPQAAPEEAPJw--Dyn--y0ADQD9LQ4NDv0t8HAbAPUJMA8yDzQNDzcPNQ85-Skg
DSD9KS4NLv0pIQDxCDQPOQ81DzsPNw88Dz4PO-0ocP0ofv0oIADlCAACIA8q-S8A-S8M-S8zAIM5
-S8B-S8PEBMA8QQKIC0POQ9AD0MPL-0sMP0sPv0rGADgBwQwD0wPUA9GDzH9LDEYABEsGAD2BAQF
MA8nDzoPOA8yDy8LCQj9KHFzAMYJQA8ZBgP9LST9LS7HAC-9sAoAAhT-AQAecRMADwEA-8lQ----
-7g=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE5IDE0OjUyOjE3Iixtb2RpZmllZD0iMjAyNS0w
NS0wMyAxNjoxODowMCJdXQ==
:: classic.lua
--[[pod_format="raw",created="2025-04-13 15:00:11",modified="2025-05-01 15:59:41",revision=137]]
--
-- classic
--
-- Copyright (c) 2014, rxi
--
-- This module is free software; you can redistribute it and/or modify it under
-- the terms of the MIT license. See LICENSE for details.
--


Object = {}
Object.__index = Object


function Object:new()
end


function Object:extend()
  local cls = {}
  for k, v in pairs(self) do
    if k:find("__") == 1 then
      cls[k] = v
    end
  end
  cls.__index = cls
  cls.super = self
  setmetatable(cls, self)
  return cls
end


function Object:implement(...)
  for _, cls in pairs({...}) do
    for k, v in pairs(cls) do
      if self[k] == nil and type(v) == "function" then
        self[k] = v
      end
    end
  end
end


function Object:is(T)
  local mt = getmetatable(self)
  while mt do
    if mt == T then
      return true
    end
    mt = getmetatable(mt)
  end
  return false
end


function Object:__tostring()
  return "Object"
end


function Object:__call(...)
  local obj = setmetatable({}, self)
  obj:new(...)
  return obj
end


:: clock.lua
--[[pod_format="raw",created="2025-04-20 14:09:58",modified="2025-05-01 15:59:41",revision=1927]]
Trigger = Object:extend()

function Trigger:new(callback, seconds, is_repeat)
    self.callback = nil
    self.sec = nil
    self.is_repeat = nil
end

-----------------------

Clock = Object:extend()

function Clock:new()
    self.seconds = 0
    self.t = 0
    self.is_running = false
    self.triggers = nil
end

function Clock:add_trigger(callback, seconds, is_repeat)
    local _trig = Trigger(callback, seconds, is_repeat)
    if self.triggers == nil then
        self.triggers = {}
    end
    table.insert(self.triggers, _trig)
end

function Clock:tick()
    self.seconds = self.seconds + 1
    self.t = 0
end

function Clock:update()
    if self.is_running then
        self.t = self.t + 1
        if self.t >= 60 then
            self:tick()
        end
    end
end

function Clock:stop()
	self:restart()
    self.is_running = false
end

function Clock:start()
    self.is_running = true
end

function Clock:restart()
    self.t = 0
    self.seconds = 0
end
:: coin.lua
--[[pod_format="raw",created="2025-04-22 00:25:21",modified="2025-05-01 15:59:41",revision=1340]]

Coin = Object:extend()
all_coins = {}

function randi_rang(l, h)
    return flr(rnd(h - l + 1)) + l
end

function Coin:new(x, y)
	self.img = 13
	self.x = x
	self.y = y 
end

function Coin:draw()
	if self.y >= 74 then
		spr(self.img, self.x, self.y)
	end
end

function Coin:update()
	self.y += 0.5
	if self.y >= 95 then
		del(all_coins, self)
	end 
end

function draw_coins()
	foreach(all_coins, function(obj) obj:draw() end )
end

function update_coins()
	foreach(all_coins, function(obj) obj:update() end )
end

function spawn_coin(num)
	for i=1, num+1 do
		local x = randi_rang(30, 62)
		local y = 74 - randi_rang(2, 15)
		add(all_coins, Coin(x,y))
	end
end



:: face.lua
--[[pod_format="raw",created="2025-04-19 16:03:43",modified="2025-05-01 15:59:41",revision=2700]]
Face = Object:extend()

local FACE_STR = {
	{"lemon",10},
	{"heart",8},
	{"bell",9},
	{"clover",27},
	{"bar",10},
	{"dimond",28},
	{"melon",11},
	{"seven",8},
}


function Face:new(reel, img, y)
	self.parent = reel
	self.img = img
	self.top = reel.y - 60
	self.bottom = reel.y + 75 
	self.x = reel.x + 1
	self.y = y
	self.speed = 3
end

function Face:draw()
	if self.y >= 15 and self.y <= 45 then
		spr(self.img, self.x, self.y)
	end
end

function Face:update()
	self.y += self.speed
	if self.y >= self.bottom then
		self.y = self.top
	end
end

function get_face_string(num)
	return tostr(num), FACE_STR[num][2]
	--return FACE_STR[num][1], FACE_STR[num][2]
end
:: flux.lua
--[[pod_format="raw",created="2025-04-19 17:37:55",modified="2025-05-01 15:59:41",revision=247]]
--
-- flux
--
-- Copyright (c) 2016 rxi
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

local flux = { _version = "0.1.5" }
flux.__index = flux

flux.tweens = {}
flux.easing = { linear = function(p) return p end }

local easing = {
  quad    = "p * p",
  cubic   = "p * p * p",
  quart   = "p * p * p * p",
  quint   = "p * p * p * p * p",
  expo    = "2 ^ (10 * (p - 1))",
  sine    = "-math.cos(p * (math.pi * .5)) + 1",
  --circ    = "-(math.sqrt(1 - (p * p)) - 1)",
  back    = "p * p * (2.7 * p - 1.7)",
  elastic = "-(2^(10 * (p - 1)) * math.sin((p - 1.075) * (math.pi * 2) / .3))"
}

local makefunc = function(str, expr)
  local load = loadstring or load
  return load("return function(p) " .. str:gsub("%$e", expr) .. " end")()
end

for k, v in pairs(easing) do
  flux.easing[k .. "in"] = makefunc("return $e", v)
  flux.easing[k .. "out"] = makefunc([[
    p = 1 - p
    return 1 - ($e)
  ]], v)
  flux.easing[k .. "inout"] = makefunc([[
    p = p * 2
    if p < 1 then
      return .5 * ($e)
    else
      p = 2 - p
      return .5 * (1 - ($e)) + .5
    end
  ]], v)
end



local tween = {}
tween.__index = tween

local function makefsetter(field)
  return function(self, x)
    local mt = getmetatable(x)
    if type(x) ~= "function" and not (mt and mt.__call) then
      error("expected function or callable", 2)
    end
    local old = self[field]
    self[field] = old and function() old() x() end or x
    return self
  end
end

local function makesetter(field, checkfn, errmsg)
  return function(self, x)
    if checkfn and not checkfn(x) then
      error(errmsg:gsub("%$x", tostring(x)), 2)
    end
    self[field] = x
    return self
  end
end

tween.ease  = makesetter("_ease",
                         function(x) return flux.easing[x] end,
                         "bad easing type '$x'")
tween.delay = makesetter("_delay",
                         function(x) return type(x) == "number" end,
                         "bad delay time; expected number")
tween.onstart     = makefsetter("_onstart")
tween.onupdate    = makefsetter("_onupdate")
tween.oncomplete  = makefsetter("_oncomplete")


function tween.new(obj, dur, vars)
  local self = setmetatable({}, tween)
  self.obj = obj
  self.rate = dur > 0 and 1 / dur or 0
  self.progress = dur > 0 and 0 or 1
  self._delay = 0
  self._ease = "quadout"
  self.vars = {}
  for k, v in pairs(vars) do
    if type(v) ~= "number" then
      error("bad value for key '" .. k .. "'; expected number")
    end
    self.vars[k] = v
  end
  return self
end


function tween:init()
  for k, v in pairs(self.vars) do
    local x = self.obj[k]
    if type(x) ~= "number" then
      error("bad value on object key '" .. k .. "'; expected number")
    end
    self.vars[k] = { start = x, diff = v - x }
  end
  self.inited = true
end


function tween:after(...)
  local t
  if select("#", ...) == 2 then
    t = tween.new(self.obj, ...)
  else
    t = tween.new(...)
  end
  t.parent = self.parent
  self:oncomplete(function() flux.f_add(self.parent, t) end)
  return t
end


function tween:stop()
  flux.remove(self.parent, self)
end



function flux.group()
  return setmetatable({}, flux)
end


function flux:to(obj, dur, vars)
  return flux.f_add(self, tween.new(obj, dur, vars))
end


function flux:update(deltatime)
  for i = #self, 1, -1 do
    local t = self[i]
    if t._delay > 0 then
      t._delay = t._delay - deltatime
    else
      if not t.inited then
        flux.clear(self, t.obj, t.vars)
        t:init()
      end
      if t._onstart then
        t._onstart()
        t._onstart = nil
      end
      t.progress = t.progress + t.rate * deltatime
      local p = t.progress
      local x = p >= 1 and 1 or flux.easing[t._ease](p)
      for k, v in pairs(t.vars) do
        t.obj[k] = v.start + x * v.diff
      end
      if t._onupdate then t._onupdate() end
      if p >= 1 then
        flux.remove(self, i)
        if t._oncomplete then t._oncomplete() end
      end
    end
  end
end


function flux:clear(obj, vars)
  for t in pairs(self[obj]) do
    if t.inited then
      for k in pairs(vars) do t.vars[k] = nil end
    end
  end
end


function flux:f_add(tween)
  -- Add to object table, create table if it does not exist
  local obj = tween.obj
  self[obj] = self[obj] or {}
  self[obj][tween] = true
  -- Add to array
  table.insert(self, tween)
  tween.parent = self
  return tween
end


function flux:remove(x)
  if type(x) == "number" then
    -- Remove from object table, destroy table if it is empty
    local obj = self[x].obj
    self[obj][self[x]] = nil
    if not next(self[obj]) then self[obj] = nil end
    -- Remove from array
    self[x] = self[#self]
    return table.remove(self)
  end
  for i, v in ipairs(self) do
    if v == x then
      return flux.remove(self, i)
    end
  end
end


function get_flux()
	local your_flux = {
	  to      = function(...) return flux.to(flux.tweens, ...) end,
	  update  = function(...) return flux.update(flux.tweens, ...) end,
	  remove  = function(...) return flux.remove(flux.tweens, ...) end,
	}
	setmetatable(your_flux, flux)
	return your_flux

end


:: handle.lua
--[[pod_format="raw",created="2025-04-19 17:45:36",modified="2025-05-01 15:59:41",revision=2475]]

handle = {
	x=78,
	y=30,
	radius = 4,
	draw=function(self)
		rect(self.x+4, self.y+5, self.x+5, 55, 6)
		pal(14,0)
		spr(16, self.x, self.y)
		pal()
	end,
	update=function(self)
	end,
	pull=function(self)
		
		if self.y == 30 then
			player_stats.total_pulls+=1
			player_stats.cash = mid(0, player_stats.cash - curr_bet, 999999)
			player_stats.total_spent += curr_bet
			flux.to(self, 0.6, { y = 70}):ease("quadin"):oncomplete(
				function()
					start_reels()
					flux.to(self, 1, {y = 30}):ease("backin")
				end
			)
		end
	end,
}
:: hud.lua
--[[pod_format="raw",created="2025-04-23 15:40:59",modified="2025-05-03 12:17:40",revision=1183]]

p_spr_1 = 75
p_spr_2 = 75
p_spr_3 = 75
p_spr_4 = 75



hud = {
	draw=function(self)
		print("$", 32, 0, 7)
		print("\014" .. pad_zeros(player_stats.cash, 6), 38, 2, 7)
		if show_payout then
			spr(p_spr_1, 42, 31)
			spr(p_spr_2, 42+4, 31)
			spr(p_spr_3, 42+8, 31)
			spr(p_spr_4, 42+8+4, 31)
		end
		spr(81,58,61)
		spr(83,34,61)
		
		if btnp(1) then
			spr(84,58,61)
		end
		
		if btnp(0) then
			spr(82,34,61)
		end
		if auto_mode and flr(time() * 2) % 2 == 0  then
			print("AUTO", 1, 92, 7)
		end
	end,
	update_payout_spr=function(self,num)
		p_spr_1, p_spr_2, p_spr_3, p_spr_4 = number_to_spr(num)
	end,
}

local sprite_map = {
    ["0"] = 75,
    ["1"] = 65,
    ["2"] = 66,
    ["3"] = 67,
    ["4"] = 68,
    ["5"] = 69,
    ["6"] = 70,
    ["7"] = 71,
    ["8"] = 73,
    ["9"] = 74
}


function number_to_spr(num)
	local s1,s2,s3,s4 = nil,nil,nil,nil
	
	local char_array = split_num(num)
	
	s1 = sprite_map[char_array[1]] or 75
	s2 = sprite_map[char_array[2]] or 75
	s3 = sprite_map[char_array[3]] or 75
	s4 = sprite_map[char_array[4]] or 75

	return s1,s2,s3,s4
end

function split_num(num_str) 
	num_str = tostr(pad_zeros(num_str, 4))
	local chars = {}
	for c in num_str:gmatch(".") do
		table.insert(chars, c)
	end
	return chars
end
:: label.qoi
b64$cW9pZgAAAeAAAAEOBAH_--Ho-f39-f39-f39-f39-f394f6DdpzEP-39-f39-cAQwD-AEMA-
xxDBP8AQwT-LEME-yBDEP8b_-3eoxj-JED8QP80QxT-9-f39-fwQwD-CEMA-xhDBP8AQwT-GEMI-
EME-yBA-whA-xh3GP8oQP9IQPxA--f39-f38EMA-whDAP8YQwT-AEME-xhDCPxDBP8gQP8IQP8Yd
xj-GEMc-yhDBPxDBP-39-f39-BDAP8IQwD-GEMY-xhDCP8wQP8IQP8Ydxj-GEMA-wxDAP8oQPxA-
-f39-f39whDAP8IQwD-GED8Qwj8QP8YQxT-JED-AEME-1hDAP8MQwD-KEMU--f39-f38EMA-whDA
P8YQPxDCPxA-xhDFP8cQwT-AEME-xh3GP8YQwD-DEMA-yxDEP-39-f39-RDAP8AQwD-HEMY-xhDF
P8cQwT-LHcA-wh3AP8YQxz-9-f39-f39-f39-f39-f3j-gClof39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-d3_RS0yyhX9-f39-f393wM-ygMV-f39-f39-d0DP8wDFf39-f39-f3c
Az-MAxX9-f39-f393AM-zAMV-f39-f39-dwDP8wDFf39-f39-f3cAz-MAxX9-f39-f393AM-zAMV
-f39-f39-dwDP8wDFf39-f39-f3cAx0-yh0DFf39-f39-f3cAx3MAxX9-f39-f393AMdwP5lRojA
HcgDFf39-f39-f3dAx3KAxX9-f39-f393wPKFf399QP9-f3KFf39-f3fAzr9-f3KAxX9-f393QM6
-f39zAMV-f39-dwDOv3a-h0rU8A6wCjAOsYoOv3fAxX9-f393AM6xAPFOv3MKDrAKDrAKDrGKDr9
2APBOsIDFf39-f3cAzr92Sg6wyg6wSjAOsAowjrAKME6-dADOsEDOsEDFf3FP-EV-f3gAzrEA8U6
-c0owDrBKDrAKDrAKDrAKDrBKDr90wM6wQM6wQMV-cQ-8xX9-d8DOv3cKDrAKDrAKDrAKDrAKDrC
KMA6-dEDOsEDOsEDFf3EP-MV-f3fAzrEA8U6-cwoOsAoOsAoOsAoOsAoOsAoOsQoOv3RA8E6wgMV
-cQ-8xX9-d8DOv3aKMA6wSjAOsAowDrCKMA6KME6-dkDFf3EP8cQP8UQP84QwD-PFf393wM6-f39
zAMV-cQ-xxA-1xA-zxX9-d8DOv39-cwDFf3EP8UQwT8QPxDAPxDAP8AQP8AQP8AQwD-FED-BEMA-
wRDBP8QV-f3fA-39-c4V-cQ-xBA-wBA-EMA-whA-wBA-wBA-ED-AED-EED-AED-AED8QP8cV-f3f
A-4AAAD9-f3MAxX9xD-EED-AED8QP8MQP8AQP8AQPxDCP8QQP8AQP8AQPxA-xxX9-d8DNf39-cwD
Ff3EP8QQP8AQPxA-wxA-wBA-ED-AED-HED-AED-AED8QP8cV-f3fAzX9xD-ANf39xAMV-cQ-xRDB
PxA-whDBPxDAP8IQwT-AED-BEMA-wBDAP8EQwT-EFf393wM1-cQ-wDX9-cQDFf3EP-MV-f3fAzX9
wj-ENcI-xDXAP8Q1wD-CNcI-xDXAP8A1wD-ANcA-xDX9zgMV-cQ-8xX9-d8DNf3CP8Q1wj-ENcA-
xDXAP8I1wj-ENcA-wDXAP8A1wD-ENf3OAxX9xD-zFf393wM-zDXwP8A1yD-ANcA-wDXAP8A1wD-A
NcI-wDXGP8A1wD-ANcA-wDXAP8A1wD-ANf3AP8wDFf3FP-EV-f3gAz-MNfA-wDXIP8A1wD-ANcA-
wDXAP8A1wj-ANcY-wDXAP8A1wD-ANcA-wDXAP8A1-cA-zAMV-f39-dwDP8A1yD-ANfI-wjXEP8A1
wD-ANcA-wDXAP8A1wj-ANcI-xDXAP8Q1wD-ANcA-wDX9wD-ANcg-wAMV-f39-dwDP8A1yD-ANfI-
wjXEP8A1wD-ANcA-wDXAP8A1wj-ANcI-xDXAP8Q1wD-ANcA-wDX9wD-ANcg-wAMV-f39-dwDP8A1
wj-CNcA-wDX2P8A1wj-ANcA-wDXAP8A1wD-ANcI-wDXCP8A1yD-ANcA-wDXAP8A1-cA-wDXAP8Q1
wD-AAxX9-f393AM-wDXCP8I1wD-ANfY-wDXCP8A1wD-ANcA-wDXAP8A1wj-ANcI-wDXIP8A1wD-A
NcA-wDX9wD-ANcA-xDXAP8ADFf39-f3cAz-ANcA-wDXEP8A18D-ENcQ-xDXAP8Q1wD-ENcA-xDXE
P8A1wD-ENf3AP8A1wD-ANcA-wDXAP8ADFf39-f3cAz-ANcA-wDXEP8A18D-ENcQ-xDXAP8Q1wD-E
NcA-xDXEP8A1wD-ENf3AP8A1wD-ANcA-wDXAP8ADFf39-f3cAz-ANcA-xDXAP8A19D-ANf30P8A1
wD-CNcI-wAMV-f39-dwDP8A1wD-ENcA-wDX0P8A1-fQ-wDXAP8I1wj-AAxX9-f393AM-wDXEP8A1
wD-ANf397j-ANcA-wDXAP8A1wD-AAxX9-f393AM-wDXEP8A1wD-ANf397j-ANcA-wDXAP8A1wD-A
AxX9-f393AM-wDXAP8I1wj-ANf397j-ANcA-xDXAP8ADFf39-f3cAz-ANcA-wjXCP8A1-f3uP8A1
wD-ENcA-wAMV-f39-dwDP8A1yD-ANf397j-ANcg-wAMV-f39-dwDP8A1yD-ANf397j-ANcg-wAMV
-f39-dwDP8A1wD-ENcA-wDX9-e4-wDXAP8Q1wD-AAxX93wPOFf396QM-wDXAP8Q1wD-ANf397j-A
NcA-xDXAP8ADFf3fAz-CAz-CAz-CAxX9-ekDP8A1wj-ANcI-wDX9-e4-wDXAP8A1wD-ANcA-wAMV
-d8DPwPAPwM-A8A-Az8DwD8DFf396QM-wDXCP8A1wj-ANf397j-ANcA-wDXAP8A1wD-AAxX93wM-
wgM-wgM-wgMV-f3pAz-ANcI-wDXCP8A1-f3uP8A1wD-ENcA-wAMV-d8DzhX9-ekDP8A1wj-ANcI-
wDX9-e4-wDXAP8Q1wD-AAxX93wPOFf396QM-wDXCP8A1wj-ANf397j-ANcA-wDXAP8A1wD-AAxX9
3wM-wgM-wgMdwgMV-f3pAz-ANcI-wDXCP8A1-f3uP8A1wD-ANcA-wDXAP8ADFf3fAz8DwD8DPwPA
PwMdA8AdAxX9-ekDP8A1wj-ANcI-wDX9-e4-wDXAP8A1wD-ANcA-wAMV-d8DP8IDP8IDHcIDFf39
6QM-wDXCP8A1wj-ANf397j-ANcA-wDXAP8A1wD-AAxX93wPOFf39wygV4wM-wDXIP8A1-f3uP8A1
yD-AAxX93wPOFf39wig-KBXiAz-ANcg-wDX9-e4-wDXIP8ADFf3fAx3CAz-CAz-CAxX9-cIoP8Ao
FeEDP8A1wD-ENcA-wDX9-e4-wDXAP8I1wj-AAxX93wMdA8AdAz8DwD8DPwPAPwMV-f3CKD-BKBXg
Az-ANcA-xDXAP8A1-f3uP8A1wD-CNcI-wAMV-d8DHcIDP8IDP8IDFf39wig-wigV3wM-wDXAP8A1
wD-ANcA-wDX9-e4-wDXAP8A1wD-ANcA-wAMV-d8DzhX9-cIoP8AowBXgAz-ANcA-wDXAP8A1wD-A
Nf397j-ANcA-wDXAP8A1wD-AAxX93wPOFf39wyjAPygV4AM-wDXAP8Q1wD-ANf397j-ANcA-wDXA
P8A1wD-AAxX9-f393AM-wDXAP8Q1wD-ANf397j-ANcA-wDXAP8A1wD-AAxX9-f393AM-wDXAP8A1
wD-ANcA-wDXg-l9XT8I1yi7CNcouwjXKLsI1yi7CNcouwjXKLsI15D-ANcA-wDXAP8A1wD-AAxX9
-f392f4kY7DBAz-ANcA-wDXAP8A1wD-ANeAuwjXKLsI1yi7CNcouwjXKLsI1yi7CNcouwjXkP8A1
wD-ANcA-wDXAP8ADFf39-f3YIMIDP8A1wD-ANcA-wDXAP8A13i7ANcIuwDXGLsA1wi7ANcYuwDXC
LsA1xi7ANcIuwDXGLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXiP8A1wD-ANcA-wDXAP8ADFf3HP-wV
-f3PIMIDP8A1wD-ANcA-wDXAP8A13i7ANcIuwDXGLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1
wi7ANcYuwDXCLsA1xi7ANcIuwDXiP8A1wD-ANcA-wDXAP8ADFf3GP-3AFf39ziDCAz-ANcg-wDXe
LsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1wi7ANeI-
wDXIP8ADFf3GP-3AFf39zSDAFcAgAz-ANcg-wDXeLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1
wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1wi7ANeI-wDXIP8ADFf3GP-3AFf39zSAVwSADP8A1wD-E
NcA-wDXeLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1
wi7ANeI-wDXAP8A1wD-ANcA-wAMV-cY-3RDAP8IQP9gV-f3NIBXAIMADP8A1wD-ENcA-wDXeLsA1
wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1wi7ANcYuwDXCLsA1xi7ANcIuwDXGLsA1wi7ANeI-wDXA
P8A1wD-ANcA-wAMV-cY-3BA-wxDAP9gV-f3MIMAVwCAVAz-ANcI-wDXCP8A13i7GNcYuxjXGLsY1
xi7GNcYuxjXGLsY1xi7GNeI-wDXAP8A1wD-ANcA-wAMV-cY-xRDAP8EQwD-AED8QwD-DEME-wBA-
whA-ED-EEME-wBDBP8EQwT-EFf39zCAVwSAVAz-ANcI-wDXCP8A13i7GNcYuxjXGLsY1xi7GNcYu
xjXGLsY1xi7GNeI-wDXAP8A1wD-ANcA-wAMV-cY-xxA-ED-AED8QwD-FED-AED8QwT-AED8QP8QQ
P8AQPxA-wBA-ED-AED-EFf39zCAVwSAVAz-ANcI-wDXCP8A1-f3uP8A1wD-CNcI-wAMV-cY-xRDB
PxA-wBA-ED-GED-AED8QP8AQPxDCP8MQP8AQPxA-wBA-ED-AED-EFf39yyDAFcAgwBUDP8A1wj-A
NcI-wDX9-e4-wDXAP8I1wj-AAxX9xj-EED-AED8QP8AQPxA-xhDBP8AQP8AQP8EQP8QQwT-AED-A
ED-AEME-xBX9-csgFcEgFcADP8A1wj-ANcI-wDXULv38Ndg-wDXAP8A1wD-ANcA-wAMV-cY-xRDB
P8AQwD-AED-DED-AED-DEMA-whA-wRA-wBA-whA-wBA-whA-xBX9-csgFcEgFcADP8A1wj-ANcI-
wDXULv38Ndg-wDXAP8A1wD-ANcA-wAMV-cY-1xA-0BA-yBDAP8UV-e4gwBXWIMAVwSAVwAM-wDXC
P8A1wj-ANdQuwDX9_C7ANdg-wDXAP8A1wD-ANcA-wAMV-cY--cAV-eogwBUgwhXVIBXBIMAVwAM-
wDXCP8A1wj-ANdQuwDX9_C7ANdg-wDXAP8A1wD-ANcA-wAMV-cY--cAV-ekgxhUgwBXQIMIVwCAV
wQM-wDXIP8A11C7ANf34LsA12D-ANcg-wAMV-cc--BX96iDKFc4gwBXAIMAVIBXBAz-ANcg-wDXU
LsA1-fguwDXYP8A1yD-AAxX9-f3zIMoVziAVwiDBFcEDP8A1wj-CNcA-wDXULsA1yCD95DXILsA1
2D-ANcg-wAMV-f398yDKFc4gwRXBIMAVwQM-wDXCP8I1wD-ANdQuwDXIIP3kNcguwDXYP8A1yD-A
AxX9-f30IMgV0CDBFcEgwBXAAz-ANcA-wDXEP8A11C7ANcggwDX94CDANcguwDXAKMY1zj-ANcg-
wAMV-f399iDFFdEgwhXBIMEDP8A1wD-ANcQ-wDXULsA1yCDANf3gIMA1yC7ANcAoxjXOP8A1yD-A
AxX9-f31IMAVwiDAFdIgwhXBIMADP8A1wD-ENcA-wDXULsA1yCDANf3gIMA1yCjCIMYowjXKP8wD
Ff39-fQgwBXEIMAV0SDCFcIgAz-ANcA-xDXAP8A11C7ANcggwDX94CDANcgowiDGKMI1yj-MAxX9
-f30IBXGIBXRIBUgwRXAIMADP8A1xD-ANcA-wDXULsA1yCDANf3gIMA1yCjAIMA1xiDAKMA12AMV
-f399CDCFcMgFdEgFcAgwBUgwBUDP8A1xD-ANcA-wDXULsA1yCDANf3gIMA1yCjAIMA1xiDAKMA1
2AMV-f399CAVxiAVzSDJFcADP8A1wD-CNcI-wDXULsA1yCDANf3gIMA1xijAIMA1yiDAKMA11gMV
-f399CDAFcEgwxXLIMEVxCDCFcADP8A1wD-CNcI-wDXULsA1yCDANf3gIMA1xijAIMA1yiDAKMA1
1gMV-f399SAVxCAVxCDEFSDAFcQgwhUgFcADP8A1yD-ANdQuwDXIIMA1-eAgwDXGKMAgwDXKIMAo
wDXWAxX9-f31IMAVwiDAFcIgwRXCIMEVxCDCFcAgwBUDP8A1yD-ANdQuwDXIIMA1-eAgwDXGKMAg
wDXKIMAowDXWAxX9-f32IBXCIBXCIMAVIBXDIBXFIMEVwiDAAz-ANcg-wDXULsA1yCDANf3gIMA1
xijAIMA1yiDAKMA11gMV-f399iDAFcAgwBXBIMAVwCAVwyAVxCDCFcQDP8A1yD-ANdQuwDXIIMA1
-eAgwDXGKMAgwDXKIMAowDXWAxX9-f33IMIVwSDBFcAgFcIgwBXEIMEVwyDAAz-ANcg-wDXULsA1
yCDANf3gIMA1xijAIMA1yiDAKMA11gMV-f39-cAgFSDCFcIgFcUgwRXCIMEDP8A1yD-ANdQuwDXI
IMA1-eAgwDXGKMAgwDXKIMAowDXWAxX9-f39IMAVwSAVwyAVxSDBFcIgwQM-wDXIP8A11C7ANcgg
-eQ1yCjAIMA1xiDAKMA12AMV-f39-SAVwSDAFcMgFcUgwRXDIMADP8A1yD-ANdQuwDXIIP3kNcgo
wCDANcYgwCjANdgDFf39-f0gFcAgwBXEIBXFIMEVwyDAAz-MNdQuwDX9_CjCIMYowjXYAxX9-f39
IMIVxSDJFcQgAz-MNdQuwDX9_CjCIMYowjXYAxX9-f39IBXJIMgVxQM14i7ANf34LsA1wCjGNdwD
Ff39-fMgxRXBIBXIIMIVzAM14i7ANf34LsA1wCjGNdwDFf39-e4gxBXDIMYVxCDIFccDNeIuwDX9
_C7ANcL_wsPHwjXeAxX9-f3qIMMVwSAVxSAVwyDAFcIgwhXEIMAVxgM14i7ANf34LsA1wjvCNd4D
Ff39-eggwRXBIBXBIBXMIMcVxSAVxgM14i7ANf34LsA1wjvCNd4DFf3cA8kV-f0gFcMgFcEgFcEg
xBXDIMQVwCAVxSDAFcUDNeIuwDX9_C7ANcI7wjXeAxX92wMdyQMV-fwgFcAgxhXCIMIVxCDBFcIg
wBXGIMAVxAM14i7ANcA74jXCO_I1wjviNcAuwDXCO8I13gMV-doDPwMdyQMV-fsgwhXCIMAVzCDI
FccgwBXDAzXiLsA1wDviNcI74jXCO_I1wC7ANcI7wjXeAxX92wPAHcA-xB3BAxX9_yDKFcogFSDC
FcEgFcggwRXBAzXiLsA1wDvANd47wDXCO8A13jvANcI7wDXeO8A1wC7ANcI7wjXeAxX92wMdwT-F
HcADFf37IMQVwyDEFcUgFSDAFSDAFcAgwBXJIMIDNeIuwDXAO8A13jvANcI7wDXeO8A1wjvANd47
wDXALsA1wjvCNd4DFf3aAz8DHcQ-HT8dwAMV-f3AIMAVwyDAFcIgxxUgwBXAIMAVwCAVzCADNeIu
wDXAO8A1yv7-owDGNco7wDXCO8A1yiHGNco7wDXCO8A1yiHGNco7wDXALsA1wjvCNd4DFf3bA8Ad
wD-BHT-BHcADFf39wCAVwyDAFcMgFSAVwiAVwCDBFcAgFcAgwBXMAzXiLsA1wDvANcohxjXKO8A1
wjvANcohxjXKO8A1wjvANcohxjXKO8A1wC7ANcI7wjXeAxX92wMdwT8dPx3EAxX9-SDAFcIgwBXD
IMAVIBXCIBUgwhXAIBXBIMEVygM14i7ANcA7wDXIIcA1xiHANcg7wDXCO8A1yCHANcYhwDXIO8A1
wjvANcghwDXGIcA1yDvANcAuwDXCO8I13gMV-doDPwMdwD-FHcADFf39IMYVwyDCFcIgxBXAIBXD
IMsDNeIuwDXAO8A1yCHANcYhwDXIO8A1wjvANcghwDXGIcA1yDvANcI7wDXIIcA1xiHANcg7wDXA
LsA1wjvCNd4DFf3bA8AdwT-EHcADFf39IBXDIBXEIMEVwyDEFcAgFcUgwhXFAzXiLsA1wDvANcYh
wDXKIcA1xjvANcI7wDXGIcA1yiHANcY7wDXCO8A1xiHANcohwDXGO8A1wC7ANcI7wjXeAxX92wMd
ygMV-f0gFcMg0hXBIBXIIMYDNeIuwDXAO8A1xiHANcohwDXGO8A1wjvANcYhwDXKIcA1xjvANcI7
wDXGIcA1yiHANcY7wDXALsA1wjvCNd4DFf3aAz8DHcgDwBX9-SDFFcMgwhXCIMQVwSAVziDAAzXi
LsA1wDvANcQhwDXOIcA1xDvANcI7wDXEIcA1ziHANcQ7wDXCO8A1xCHANc4hwDXEO8A1wC7ANcI7
wjXeAxX92wPKPwMV-f3FIMUVIMkVwiAVzyADNeIuwDXAO8A1xCHANc4hwDXEO8A1wjvANcQhwDXO
IcA1xDvANcI7wDXEIcA1ziHANcQ7wDXALsA1wjvCNd4DFf3bA8A-yB0DFf39xyAVxCDGFcQgFc8g
AzXiLsA1wDvANcIhwDXSIcA1wjvANcI7wDXCIcA10iHANcI7wDXCO8A1wiHANdIhwDXCO8A1wC7A
NcI7wjXeAxX93AMdyAMV-f3IIBXSIBXPIAM14i7ANcA7wDXCIcA10iHANcI7wDXCO8A1wiHANdIh
wDXCO8A1wjvANcIhwDXSIcA1wjvANcAuwDXCO8I13gMV-d0DyBX9-ckgwhXOIMAVziDAAzXiLsA1
wDvANcIhwDXSIcA1wjvANcI7wDXCIcA10iHANcI7wDXCO8A1wiHANdIhwDXCO8A1wC7ANcI7wjXe
AxX9-f3yIBXAIMEVzCAVziDAFQM14i7ANcA7wDXCIcA10iHANcI7wDXCO8A1wiHANdIhwDXCO8A1
wjvANcIhwDXSIcA1wjvANcAuwDXCO8I13gMV-f398iDAFcEgyBXCIMAVzSDAFcADNeIuwDXAO8A1
wiHANdIhwDXCO8A1wjvANcIhwDXSIcA1wjvANcI7wDXCIcA10iHANcI7wDXALsA1wjvCNd4DFf39
-fMgwBXJIBXBIMAVziAVwQM14i7ANcA7wDXCIcA10iHANcI7wDXCO8A1wiHANdIhwDXCO8A1wjvA
NcIhwDXSIcA1wjvANcAuwDXCO8I13gMV-f399CDBFccgFcAgwBXOIMAVwQM14i7ANcA7wDXCIcA1
0iHANcI7wDXCO8A1wiHANdIhwDXCO8A1wjvANcIhwDXSIcA1wjvANcAuwDXCO8I13gMV-cQ-_RX9
8yDBFcUgwhXPIBXCAzXiLsA1wDvANcIhwDXSIcA1wjvANcI7wDXCIcA10iHANcI7wDXCO8A1wiHA
NdIhwDXCO8A1wC7ANcI7wjXeAxX9wz-7Ff30IMgV0SAVwgM14i7ANcA7wDXAIcA11iHANcA7wDXC
O8A1wCHANdYhwDXAO8A1wjvANcAhwDXWIcA1wDvANcAuwCDCO8I13gMV-cM-_xX9-dIgwBXCAzXi
LsA1wDvANcAhwDXWIcA1wDvANcI7wDXAIcA11iHANcA7wDXCO8A1wCHANdYhwDXAO8A1wC7AIMI7
wjXeAxX9wz-7Ff390iDBFcEDNeIuwDXAO8A1wCHANdYhwDXAO8A1wjvANcAhwDXWIcA1wDvANcI7
wDXAIcA11iHANcA7wDXALsAgwDXAO8IgwDXcAxX9wz-WED-PED-HED-GFf390iAVIMEVAzXiLsA1
wDvANcAhwDXWIcA1wDvANcI7wDXAIcA11iHANcA7wDXCO8A1wCHANdYhwDXAO8A1wC7AIMA1wDvC
IMA13AMV-cM-1hA-zxA-xxA-xhX9-dIgFcEgwAM14i7ANcA7wDXAIcA11iHANcA7wDXCO8A1wCHA
NdYhwDXAO8A1wjvANcAhwDXWIcA1wDvANcAuwCDANcA7wiDANdwDFf3DP8QQPxDAP8AQwD-BEMA-
wRDBPxDAPxA-wRDAP8QQwj8QP8AQPxDCP8QV-f3RIMAVwwM14i7ANcA7wDXAIcA11iHANcA7wDXC
O8A1wCHANdYhwDXAO8A1wjvANcAhwDXWIcA1wDvANcAuwCDANcA7wiDANdwDFf3DP8QQwD-BED-A
ED-CED8QP8AQPxA-ED8QPxA-wBA-xBA-wRA-wBA-wBA-xhX9-dEgFcQDNeIuwDXAO8A1wCHaNcA7
wDXCO8A1wCHaNcA7wDXCO8A1wCHaNcA7wDXALsAgwDXAO8IgwDXcAxX9wz-EED-CEMI-wBDBPxA-
wBA-ED8QPxA-EMI-xBA-whDAP8EQP8YV-f3OIMIVxAM14i7ANcA7wDXAIdo1wDvANcI7wDXAIdo1
wDvANcI7wDXAIdo1wDvANcAuwCDANcA7wiDANdwDFf3DP8QQP8IQP8IQP8AQPxA-wBA-ED-BED8Q
P8cQP8EQP8AQP8AQP8YV-f3OIMAVIMAVwwM14i7ANcA7wDXeO8A1wjvANd47wDXCO8A13jvANcAu
wCDANcQgwDXcAxX9wz-EED-DEME-wBDBP8AQwT8QP8EQP8AQwT-AED-CEMA-ED-AED-BEMA-xBX9
-c0gwRXAIMEVwQM14i7ANcA7wDXeO8A1wjvANd47wDXCO8A13jvANcAuwCDANcQgwDXcAxX9wz-7
Ff39zSDCFcEgwBXAAzXiLsA1wDvANcohxjXKO8A1wjvANcohxjXKO8A1wjvANcohxjXKO8A1wC7A
IMA1xCDANdwDFf3DP-sV-f3MIMgVIAM14i7ANcA7wDXKIcY1yjvANcI7wDXKIcY1yjvANcI7wDXK
IcY1yjvANcAuwCDANcQgwDXcAxX9wz-7Ff39zCAVwCDFFSADP8w11C7ANcA7wDXeO8A1wjvANd47
wDXCO8A13jvANcAuwCDANcIgwjXcAxX9xD-5Ff39zCDBFcAgxBUgAz-MNdQuwDXAO8A13jvANcI7
wDXeO8A1wjvANd47wDXALsAgwDXCIMI13AMV-f39-c4gwBUgwBUgwhXBIAM-wDXIP8A11C7ANcA7
4jXCO_I1wjviNcAuwCDGNd4DFf39-f3OIBXBIBUgwRXDAz-ANcg-wDXULsA1wDviNcI74jXCO_I1
wC7AIMY13gMV-f39-c4gwBXAIBUgwRXDAz-ANcI-wjXAP8A11C7ANf34LsA15gMV-f39-c4gwBXA
IBUgwhXBIAM-wDXCP8I1wD-ANdQuwDX9_C7ANeYDFf39-f3OIMAVwCAVIMYDP8A1wD-ANcQ-wDXU
LsA1-fguwDXmAxX9-f39ziAVwSAVIMYDP8A1wD-ANcQ-wDXULsA1-fguwDXmAxX94APEFf395CAV
wCDAFSDGAz-ANcA-xDXAP8A11C7ANf34LsA15gMV-d8DOsEdwQMV-f3jIMIVwCDEFcADP8A1wD-E
NcA-wDXULsA1-fguwDXmAxX92APFOsEdwgMV-f3PIMAVzSDAFcAgFSAVIMIVwwM-wDXEP8A1wD-A
NdQuwDX9_C7ANeYDFf3XAx3MAxX9-cogxRXAIMAVIM0VIMIVwiDBAz-ANcQ-wDXAP8A11C7ANf34
LsA15gMV-dcDHcwDFf39yCDfFcIgwgM-wDXAP8I1wj-ANdQuwDX9_C7ANeYDFf3XAx3MAxX9-cIg
xRXAIMgVwCDHFcIgwxXCIMIDP8A1wD-CNcI-wDXULsA1-fguwDXmAxX91wMdzAMV-f3CIMAVySDA
FcMgwRXMIMgDP8A1yD-ANdQuwDX9_C7ANeYDFf3XAx3MAxX9-fEDP8A1yD-ANdQuwDX9_C7ANeYD
Ff3XAx3MAxX9-fEDP8A1wD-ANcA-wDXAP8A11C7ANf34LsA15gMV-dcDHcwDFf398QM-wDXAP8A1
wD-ANcA-wDXULsA1-fguwDXmAxX91wMdzAMV-f3xAz-ANcA-wDXAP8A1wD-ANdQuwDX9_C7ANeYD
Ff3XAx3MAxX9-fEDP8A1wD-ANcA-wDXAP8A11C7ANf34LsA15gMV-dcDHcwDFf398QM-wDXAP8Q1
wD-ANdQuwDX9_C7ANeYDFf3XAx3MAxX9-fEDP8A1wD-ENcA-wDXULsA1-fguwDXmAxX92APMFf39
8gM-wDXAP8A1wD-ANcA-wDXULsA1-fguwDXmAxX9-f393AM-wDXAP8A1wD-ANcA-wDXULsA1-fgu
wDXmAxX9-f393AM-wDXAP8A1wD-ANcA-wDXULsA1-fguwDXmAxX9-f393AM-wDXAP8A1wD-ANcA-
wDXULsA1-fguwDXmAxX9-f393AM-wDXIP8A11C7ANf34LsA15gMV-dI-1hX9-e4DP8A1yD-ANdQu
wDX9_C7ANeYDFf3RP9gV-f3tAz-ANcI-wjXAP8A11C7ANf34LsA15gMV-dE-2BX9-e0DP8A1wj-C
NcA-wDXULsA1-fguwDXmAxX90T-YFf397QM-wDXAP8A1wD-ANcA-wDXULsA10C791jXOLsA15gMV
-dE-2BX9-e0DP8A1wD-ANcA-wDXAP8A11C7ANdAu-dY1zi7ANeYDFf3RP9gV-f3tAz-ANcA-wDXA
P8A1wD-ANdQuwDXWIMA1-cQgwDXWLsA15gMV-dE-xRDBPxA-EMA-wBDBP8QV-f3tAz-ANcA-wDXA
P8A1wD-ANdQuwDXWIMA1-cQgwDXWLsA15gMV-dE-xBA-whDAP8EQP8cV-f3tAz-ANcA-wDXAP8A1
wD-ANdQuwDXUIMA1-cggwDXULsA15gMV-dE-xRDAP8AQP8IQP8cV-f3tAz-ANcA-wDXAP8A1wD-A
NdQuwDXUIMA1-cggwDXULsA15gMV-dE-xxA-ED-CED-HFf397QM-wDXAP8I1wj-ANdQuwDXSIMA1
-cwgwDXSLsA15gMV-dE-xBDBP8AQP8MQwT-EFf397QM-wDXAP8I1wj-ANdQuwDXSIMA1-cwgwDXS
LsA15gMV-dE-2BX9-e0DP8A1yD-ANdQuwDXQIMA1-dAgwDXQLsA15gMV-dE-2BX9-e0DP8A1yD-A
NdQuwDXQIMA1-dAgwDXQLsA15gMV-dE-2BX9-e0DP8A1wD-ENcA-wDXULsA10CD91DXQLsA15gMV
-dI-1hX9-e4DP8A1wD-ENcA-wDXULsA10CD91DXQLsA15gMV-f39-dwDP8A1wD-ANcA-wDXAP8A1
1C7ANf34LsA15gMV-f39-dwDP8A1wD-ANcA-wDXAP8A11C7ANf34LsA15gMV-f39-dwDP8A1wD-E
NcA-wP6rUjbULsA1-fguwArmAxX9-f393AM-wDXAP8Q1wD-ACtQuwDX9_C7ACuYDFf39-f3cAz-A
NcA-wDXEP8A11C7ANf34LsA15gMV-f39-dwDP8A1wD-ANcQ-wDXULsA1-fguwDXmAxX9-f393AM-
wDXAP8A1xD-ANdQuwDX9_C7ANeYDFf39-f3cAz-ANcA-wDXEP8A11C7ANf34LsA15gMV-f39-dwD
P8A1yD-ANdQuwDX9_C7ANeYDFf39-f3cAz-ANcg-wDXULsA1-fguwDXmAxX9-f393AM-wDXIP8A1
1C7ANf34LsA15gMV-f39-dwDP8A1yD-ANdQuwDX9_C7ANeYDFf39-f3cAz-ANcg-wDXULsA1-fgu
wDXmAxX9-f393AM-wDXIP8A11C7ANf34LsA15gMV-f39-dwDP8w11C7ANf34LsA15gMV-f39-dwD
P8w11C7ANf34LsA15gMV-f39-dwDNeIuwDX9_C7ANeYDFf39-f3cAzXiLsA1-fguwDXmAxX9-f39
3AM14i79-DXmAxX9-f393AM14i79-DXmAxX9-f393AM1-f39zAMV-f39-dwDNf39-cwDFf39-f3c
AzX9-f3MAxX9-f393AM1-f39zAMV-f39-dwDNf39-cwDFf39-f3cAzX9-f3MAxX9-f393AM1-f39
zAMV-f39-dwDNf39-cwDFf39-f3cAzX9-f3MAxX9-f393AM1-f39zAMV-f39-dwDNf39-cwDFf39
-f3cAzX9-f3MAxX9-f393AM1-f39zAMV-f39-dwDNf39-cwDFf39-f3cAzX9-f3MAxX9-f393AM1
-f39zAMV-f39-dwDNf39-cwDFf39-f3cAzX9-f3MAxX9-f393AM1-f39zAMV-f39-dwDNf39-cwD
Ff39-f3cAzX9-f3MAxX9-f393QM1-f39ygMV-f39-d8D-f39yhX9-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-eoAAAAAAAAAAQ==
:: light.lua
--[[pod_format="raw",created="2025-04-21 23:26:22",modified="2025-05-01 15:59:41",revision=1500]]

Light = Object:extend()

local light_y = 17

function Light:new(x)
	self.img = 11
	self.tic = 0
	self.x = x
	self.is_on = false 
	self.col = 8
end

function Light:draw()
	pal(30, self.col)
	spr(self.img, self.x, light_y)
	pal()
end

function Light:update()
	if self.is_on then
		self.tic += 1
		if self.tic == 10 then
			self:turn_off()
		end
	end
end

function Light:turn_on()
	self.is_on = true
	self.img = 10
end

function Light:turn_off()
	self.is_on = false
	self.img = 11
	self.tic = 0
end

function draw_lights()
	foreach(all_lights, function(obj) obj:draw() end )
end

function update_lights()
	foreach(all_lights, function(obj) obj:update() end )
end

local light_small_actions = {
	[1] = function()
		all_lights[4]:turn_on()
	end,
	[2] = function()
		all_lights[3]:turn_on()
		all_lights[5]:turn_on()
	end,
	[3] = function()
		all_lights[2]:turn_on()
		all_lights[6]:turn_on()
	end,
	[4] = function()
		all_lights[1]:turn_on()
		all_lights[7]:turn_on()
	end,
	[5] = function()
		all_lights[2]:turn_on()
		all_lights[6]:turn_on()
	end,
	[6] = function()
		all_lights[3]:turn_on()
		all_lights[5]:turn_on()
	end,
	[7] = function()
		all_lights[4]:turn_on()
	end,
	[9] = function()
		light_man:restart()
	end,
}

light_man = {
	is_running=false,
	t=0,
	seconds=0,
	update=function(self)
		if self.is_running then
	        self.t = self.t + 1
	        if self.t >= 5 then
	            --self:tick()
	            self.seconds+=1
	            do_small_lights()
	            self.t = 0
	        end
	    end
	end,
	restart=function(self)
		self.is_running=false
		self.t=0
		self.seconds=0
	end,
}



function do_small_lights()
	local action = light_small_actions[light_man.seconds]
	if action then
		action()
	end
end

all_lights = {
	Light(21),
	Light(29),
	Light(37),
	Light(45),
	Light(53),
	Light(61),
	Light(69),
}

:: main.lua
--[[pod_format="raw",created="2025-04-19 14:51:36",icon=userdata("u8",16,16,"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"),lowcol_icon=false,modified="2025-05-03 16:18:00",revision=4520]]



cd("/projects/picoslots")

include ("src/label.lua")
include ("src/flux.lua")
include ("src/classic.lua")
include ("src/clock.lua")
include ("src/light.lua")
include ("src/coin.lua")
include ("src/face.lua")
include ("src/reel.lua")
include ("src/handle.lua")
include ("src/tab.lua")
include ("src/hud.lua")
include ("src/bank.lua")
include ("src/shop.lua")

include ("src/stats.lua")

include ("src/game.lua")

:: reel.lua
--[[pod_format="raw",created="2025-04-19 16:25:05",modified="2025-05-01 15:59:41",revision=2649]]

Reel = Object:extend()

local bg_spr = 9

function Reel:new(x, y)
	self.img = 1
	self.x = x
	self.y = y
	self.reel_y = 0 
	self.faces = {}
	set_upfaces(self)
	self.spinning = false
	self.face = 3 
end

function Reel:stop()
	if self.spinning then
		sfx(4)
		self.spinning = false
		self.face = flr(rnd(8)) + 1 
	end
end

function Reel:update()
	if self.spinning then
		for f in all(self.faces) do 
			f:update()
		end
	end
end

function Reel:draw()
	if not self.spinning then
		spr(self.face, self.x+1, self.y+1)
	else
		for f in all(self.faces) do 
			f:draw()
		end
	end
	
	spr(bg_spr, self.x, self.y)
end

function set_upfaces(reel)
	local start_y = reel.y +1
	for i=1, 8 do
		local f = Face(reel, i, start_y -(i - 1) * 16)
		add(reel.faces, f)
	end
end

function Reel:spin()
	self.spinning = true
end
:: .info.pod
b64$LS1bW3BvZCxhdXRob3I9InN1Z2Fydm9pZCIsYmJzX2lkPSJfZGV2MjY3NiIsY3JlYXRlZD0i
MjAyNS0wNC0xOSAxNDo1MjoxNyIsaWNvbj11c2VyZGF0YSgidTgiLDE2LDE2LCIwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEwMTAxMDEw
NzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwNzA3MDEwMTA3MGQwZDBkMGQwZDBkMGQwZDBkMGQwZDBk
MDcwMTAxMDcwZDBkMGQwZDBkMGQwZDBkMGQwZDBkMGQwNzAxMDEwNzBkMGQwZDBkMGQwZDBkMGQw
ZDBkMGQwZDA3MDEwMTA3MGQwZDBkMGQwZDBkMGQwZDBkMGQwZDBkMDcwMTAxMDcwZDBkMGQwZDBk
MGQwZDBkMGQwZDBkMGQwNzAxMDEwNzBkMGQwZDBkMGQwZDBkMGQwZDBkMGQwZDA3MDEwMTA3MDcw
NzA3MDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAxMDcwNzA2MDYwNjA2MDYwNjA2MDYwNjA3MDcwNzAx
MDEwNzA3MDYwNjA2MDYwNjA2MDYwNjA2MDcwNzA2MDEwMTA3MDcwNzA3MDcwNzA3MDcwNzA3MDcw
NzA2MDEwMDAxMDYwNjA2MDYwNjA2MDYwNjA2MDYwNjA2MDEwMDAwMDEwMTAxMDEwMTAxMDEwMTAx
MDEwMTAxMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIpLGxvd2NvbF9p
Y29uPXRydWUsbW9kaWZpZWQ9IjIwMjUtMDUtMDMgMTY6MTg6MDAiLG5vdGVzPSIiLHJ1bnRpbWU9
MTcsc2FuZGJveD1mYWxzZSx0aXRsZT0iU2xvdHMiLHZlcnNpb249IiIsd29ya3NwYWNlcz17e2xv
Y2F0aW9uPSJtYWluLmx1YSMxIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMC5n
ZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNlX2lu
ZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH19XV0=
:: [eoc]
